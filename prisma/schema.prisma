generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  createdat  DateTime @default(now())  @db.Timestamp(6)
  updatedat  DateTime @default(now())  @db.Timestamp(6)

  first_name String   @db.VarChar(63)
  last_name  String   @db.VarChar(63)
  email      String   @db.VarChar(127) @unique
  password   String   @db.VarChar(127)

  role       String
  classroom  Classroom[]  @relation(name: "TeacherClassroom")
  child      Student[]    @relation(name: "ParentsStudent")
  student    Student[]    @relation(name: "TeacherStudent")
  plannings  Planning[]   @relation(name: "TeacherPlannings")
  planningId Int?         @unique
}

model Classroom {
  id         Int          @id @default(autoincrement())
  createdat  DateTime     @default(now()) @db.Timestamp(6)
  updatedat  DateTime     @default(now()) @db.Timestamp(6)

  name       String

  teacher    User         @relation(name: "TeacherClassroom", fields: [teacherId], references: [id])
  student    Student[]    @relation(name: "ClassroomStudent")
  teacherId  Int
}

model Student {
  id         Int        @id @default(autoincrement())
  createdat  DateTime   @default(now())  @db.Timestamp(6)
  updatedat  DateTime   @default(now())  @db.Timestamp(6)

  name       String 
  age        Int
  
  parents     User?       @relation(name: "ParentsStudent", fields: [parentsId], references: [id])
  parentsId   Int?

  classroom   Classroom   @relation(name: "ClassroomStudent", fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId Int

  teacher     User        @relation(name: "TeacherStudent", fields: [teacherId], references: [id])
  teacherId   Int

  diaries     Diary[]     @relation(name: "StudentDiary")
}

model Diary {
  id              Int          @id @default(autoincrement())
  createdat       DateTime     @default(now()) @db.Timestamp(6)
  updatedat       DateTime     @default(now()) @db.Timestamp(6)

  entryTime       String       @db.VarChar(8)   // Formato "HH:mm:ss"
  departureTime   String       @db.VarChar(8)   // Formato "HH:mm:ss"

  date            DateTime     @default(now())
  
  feeding         String       @default("comeu")
  ateAlone        String
  obsFeeding      String?

  sleep           String      
  startSleep      String?      @db.VarChar(8)   // Formato "HH:mm:ss"
  endSleep        String?      @db.VarChar(8)   // Formato "HH:mm:ss"
  obsSleep        String?

  bathroom        String
  bathroomAmount   Int          @default(0)
  obsBathroom     String?

  reminder        String?     
  notice          String?

  studentId       Int? 
  student         Student?     @relation(name: "StudentDiary", fields: [studentId], references: [id])
}

model Planning {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now()) @db.Timestamp(6)
  updatedAt         DateTime   @default(now()) @db.Timestamp(6)

  teacherName       String?
  ageGroup          String?
  bnccCod           Int
  fieldExperience   String
  objectives        String
  method            String
  teachingResources String

  teacher           User    @relation(name: "TeacherPlannings", fields: [teacherId], references: [id])
  teacherId         Int
}
